@startuml
package application{
    package core{
class ApplicationData
{
value
+getValue()
+setValue(boolean value)
}
    }
    package initializer{
class ApplicationInitializer
{
ApplicationInitializer(ViewFactory)
}
    }
    package mvc{
interface ApplicationControllerAccess
{
+ execute()
}
class ApplicationModel
{
ApplicationData data
ApplicationService service
+ getValue()
+ execute()
}
interface ApplicationViewAccess {
+ getValue()
}
    }
    package service{
class ApplicationService {
+ execute(ApplicationData)
}

    }
  }
  package ui{
    package template{
class Controller
{
Model model
Controller(Model)
}
class Model {
View[] views
+ registerView(View)
+ notifyViews()
}
class View
{
Model model
View(Model)
# {abstract} initController()
+ {abstract} update()
}
class ViewFactory
{
{abstract} makeViews(Model)
}
    }
    package console{
class ConsoleController
{
+ ConsoleController(Model)
+ execute()
}
class ConsoleView
{
ConsoleController controller
ConsoleView(Model)
# initController()
+ update()
}
class ConsoleViewFactory
{
+ makeViews(Model)
}
    }
  }
class Starter {
+ void main(String[] args)
}

ApplicationInitializer ..> ViewFactory
ApplicationInitializer ..> ApplicationModel
ViewFactory .down.> Model

ApplicationModel --|> Model
ApplicationModel ..|> ApplicationControllerAccess
ApplicationModel .right.|> ApplicationViewAccess
ApplicationModel o--> ApplicationData
ApplicationModel o--> ApplicationService

ApplicationService ..> ApplicationData

ConsoleController --|> Controller
ConsoleController ..> ApplicationControllerAccess

ConsoleView --|> View
ConsoleView ..> ApplicationViewAccess
ConsoleView ..> ConsoleController

ConsoleViewFactory --|> ViewFactory
ConsoleViewFactory ..> Model
ConsoleViewFactory ..> ConsoleView
Controller  o--> Model
Model o-left-> View
View o--> Model

Starter ..> ApplicationInitializer
Starter ..>  ConsoleViewFactory
@enduml
